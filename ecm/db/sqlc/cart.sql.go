// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: cart.sql

package db

import (
	"context"
	"database/sql"
	"time"

	"github.com/google/uuid"
)

const addToCart = `-- name: AddToCart :one
INSERT INTO cart_items (user_id, product_id, quantity)
VALUES ($1, $2, $3)
ON CONFLICT (user_id, product_id) 
DO UPDATE SET quantity = cart_items.quantity + EXCLUDED.quantity, updated_at = NOW()
RETURNING id, user_id, product_id, quantity, created_at, updated_at
`

type AddToCartParams struct {
	UserID    uuid.UUID `json:"user_id"`
	ProductID uuid.UUID `json:"product_id"`
	Quantity  int32     `json:"quantity"`
}

func (q *Queries) AddToCart(ctx context.Context, arg AddToCartParams) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, addToCart, arg.UserID, arg.ProductID, arg.Quantity)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const clearCart = `-- name: ClearCart :exec
DELETE FROM cart_items
WHERE user_id = $1
`

func (q *Queries) ClearCart(ctx context.Context, userID uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, clearCart, userID)
	return err
}

const getCartItems = `-- name: GetCartItems :many
SELECT c.id, c.user_id, c.product_id, c.quantity, c.created_at, c.updated_at, p.name as product_name, p.price, p.image_url
FROM cart_items c
JOIN products p ON c.product_id = p.id
WHERE c.user_id = $1
`

type GetCartItemsRow struct {
	ID          uuid.UUID      `json:"id"`
	UserID      uuid.UUID      `json:"user_id"`
	ProductID   uuid.UUID      `json:"product_id"`
	Quantity    int32          `json:"quantity"`
	CreatedAt   time.Time      `json:"created_at"`
	UpdatedAt   time.Time      `json:"updated_at"`
	ProductName string         `json:"product_name"`
	Price       string         `json:"price"`
	ImageUrl    sql.NullString `json:"image_url"`
}

func (q *Queries) GetCartItems(ctx context.Context, userID uuid.UUID) ([]GetCartItemsRow, error) {
	rows, err := q.db.QueryContext(ctx, getCartItems, userID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []GetCartItemsRow{}
	for rows.Next() {
		var i GetCartItemsRow
		if err := rows.Scan(
			&i.ID,
			&i.UserID,
			&i.ProductID,
			&i.Quantity,
			&i.CreatedAt,
			&i.UpdatedAt,
			&i.ProductName,
			&i.Price,
			&i.ImageUrl,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const removeFromCart = `-- name: RemoveFromCart :exec
DELETE FROM cart_items
WHERE user_id = $1 AND product_id = $2
`

type RemoveFromCartParams struct {
	UserID    uuid.UUID `json:"user_id"`
	ProductID uuid.UUID `json:"product_id"`
}

func (q *Queries) RemoveFromCart(ctx context.Context, arg RemoveFromCartParams) error {
	_, err := q.db.ExecContext(ctx, removeFromCart, arg.UserID, arg.ProductID)
	return err
}

const updateCartQuantity = `-- name: UpdateCartQuantity :one
UPDATE cart_items
SET quantity = $3, updated_at = NOW()
WHERE user_id = $1 AND product_id = $2
RETURNING id, user_id, product_id, quantity, created_at, updated_at
`

type UpdateCartQuantityParams struct {
	UserID    uuid.UUID `json:"user_id"`
	ProductID uuid.UUID `json:"product_id"`
	Quantity  int32     `json:"quantity"`
}

func (q *Queries) UpdateCartQuantity(ctx context.Context, arg UpdateCartQuantityParams) (CartItem, error) {
	row := q.db.QueryRowContext(ctx, updateCartQuantity, arg.UserID, arg.ProductID, arg.Quantity)
	var i CartItem
	err := row.Scan(
		&i.ID,
		&i.UserID,
		&i.ProductID,
		&i.Quantity,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
