// Code generated by sqlc. DO NOT EDIT.
// versions:
//   sqlc v1.28.0
// source: shops.sql

package db

import (
	"context"
	"database/sql"

	"github.com/google/uuid"
)

const createShop = `-- name: CreateShop :one
INSERT INTO shops (name, description, owner_id)
VALUES ($1, $2, $3)
RETURNING id, name, description, owner_id, created_at, updated_at
`

type CreateShopParams struct {
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
	OwnerID     uuid.UUID      `json:"owner_id"`
}

func (q *Queries) CreateShop(ctx context.Context, arg CreateShopParams) (Shop, error) {
	row := q.db.QueryRowContext(ctx, createShop, arg.Name, arg.Description, arg.OwnerID)
	var i Shop
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const deleteShop = `-- name: DeleteShop :exec
DELETE FROM shops
WHERE id = $1
`

func (q *Queries) DeleteShop(ctx context.Context, id uuid.UUID) error {
	_, err := q.db.ExecContext(ctx, deleteShop, id)
	return err
}

const getShop = `-- name: GetShop :one
SELECT id, name, description, owner_id, created_at, updated_at FROM shops
WHERE id = $1
`

func (q *Queries) GetShop(ctx context.Context, id uuid.UUID) (Shop, error) {
	row := q.db.QueryRowContext(ctx, getShop, id)
	var i Shop
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}

const listShops = `-- name: ListShops :many
SELECT id, name, description, owner_id, created_at, updated_at FROM shops
ORDER BY created_at
LIMIT $1 OFFSET $2
`

type ListShopsParams struct {
	Limit  int32 `json:"limit"`
	Offset int32 `json:"offset"`
}

func (q *Queries) ListShops(ctx context.Context, arg ListShopsParams) ([]Shop, error) {
	rows, err := q.db.QueryContext(ctx, listShops, arg.Limit, arg.Offset)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shop{}
	for rows.Next() {
		var i Shop
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const listShopsByOwner = `-- name: ListShopsByOwner :many
SELECT id, name, description, owner_id, created_at, updated_at FROM shops
WHERE owner_id = $1
ORDER BY created_at
`

func (q *Queries) ListShopsByOwner(ctx context.Context, ownerID uuid.UUID) ([]Shop, error) {
	rows, err := q.db.QueryContext(ctx, listShopsByOwner, ownerID)
	if err != nil {
		return nil, err
	}
	defer rows.Close()
	items := []Shop{}
	for rows.Next() {
		var i Shop
		if err := rows.Scan(
			&i.ID,
			&i.Name,
			&i.Description,
			&i.OwnerID,
			&i.CreatedAt,
			&i.UpdatedAt,
		); err != nil {
			return nil, err
		}
		items = append(items, i)
	}
	if err := rows.Close(); err != nil {
		return nil, err
	}
	if err := rows.Err(); err != nil {
		return nil, err
	}
	return items, nil
}

const updateShop = `-- name: UpdateShop :one
UPDATE shops
SET 
  name = $2,
  description = $3,
  updated_at = NOW()
WHERE id = $1
RETURNING id, name, description, owner_id, created_at, updated_at
`

type UpdateShopParams struct {
	ID          uuid.UUID      `json:"id"`
	Name        string         `json:"name"`
	Description sql.NullString `json:"description"`
}

func (q *Queries) UpdateShop(ctx context.Context, arg UpdateShopParams) (Shop, error) {
	row := q.db.QueryRowContext(ctx, updateShop, arg.ID, arg.Name, arg.Description)
	var i Shop
	err := row.Scan(
		&i.ID,
		&i.Name,
		&i.Description,
		&i.OwnerID,
		&i.CreatedAt,
		&i.UpdatedAt,
	)
	return i, err
}
